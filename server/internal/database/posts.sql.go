// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package database

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(id, created_at, updated_at, username, header, body, tag, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, username, header, body, tag, user_id
`

type CreatePostParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
	Header    string
	Body      string
	Tag       string
	UserID    string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Header,
		arg.Body,
		arg.Tag,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Header,
		&i.Body,
		&i.Tag,
		&i.UserID,
	)
	return i, err
}

const deletePostbyID = `-- name: DeletePostbyID :one
DELETE FROM posts WHERE id = $1 RETURNING id, created_at, updated_at, username, header, body, tag, user_id
`

func (q *Queries) DeletePostbyID(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, deletePostbyID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Header,
		&i.Body,
		&i.Tag,
		&i.UserID,
	)
	return i, err
}

const editPost = `-- name: EditPost :one
UPDATE posts SET header = $1, body = $2 WHERE id = $3 RETURNING id, created_at, updated_at, username, header, body, tag, user_id
`

type EditPostParams struct {
	Header string
	Body   string
	ID     string
}

func (q *Queries) EditPost(ctx context.Context, arg EditPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, editPost, arg.Header, arg.Body, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Header,
		&i.Body,
		&i.Tag,
		&i.UserID,
	)
	return i, err
}

const getPostbyID = `-- name: GetPostbyID :one
SELECT id, created_at, updated_at, username, header, body, tag, user_id FROM posts WHERE id = $1
`

func (q *Queries) GetPostbyID(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostbyID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Header,
		&i.Body,
		&i.Tag,
		&i.UserID,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, created_at, updated_at, username, header, body, tag, user_id FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Header,
			&i.Body,
			&i.Tag,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
