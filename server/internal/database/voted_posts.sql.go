// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: voted_posts.sql

package database

import (
	"context"
)

const createPostVote = `-- name: CreatePostVote :one
INSERT INTO voted_posts(id, post_id, user_id)  
VALUES ($1, $2, $3)
RETURNING id, post_id, user_id
`

type CreatePostVoteParams struct {
	ID     string
	PostID string
	UserID string
}

func (q *Queries) CreatePostVote(ctx context.Context, arg CreatePostVoteParams) (VotedPost, error) {
	row := q.db.QueryRowContext(ctx, createPostVote, arg.ID, arg.PostID, arg.UserID)
	var i VotedPost
	err := row.Scan(&i.ID, &i.PostID, &i.UserID)
	return i, err
}

const deleteVotesByPost = `-- name: DeleteVotesByPost :one
DELETE FROM voted_posts WHERE post_id = $1 AND user_id = $2 RETURNING id, post_id, user_id
`

type DeleteVotesByPostParams struct {
	PostID string
	UserID string
}

func (q *Queries) DeleteVotesByPost(ctx context.Context, arg DeleteVotesByPostParams) (VotedPost, error) {
	row := q.db.QueryRowContext(ctx, deleteVotesByPost, arg.PostID, arg.UserID)
	var i VotedPost
	err := row.Scan(&i.ID, &i.PostID, &i.UserID)
	return i, err
}

const getVotesByPost = `-- name: GetVotesByPost :one
SELECT COUNT(*) FROM voted_posts WHERE post_id = $1
`

func (q *Queries) GetVotesByPost(ctx context.Context, postID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getVotesByPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
