// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comments.sql

package database

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments(id, created_at, updated_at, username, body, post_id, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, username, body, post_id, user_id
`

type CreateCommentParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
	Body      string
	PostID    string
	UserID    string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Body,
		arg.PostID,
		arg.UserID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Body,
		&i.PostID,
		&i.UserID,
	)
	return i, err
}

const deleteCommentById = `-- name: DeleteCommentById :one
DELETE FROM comments WHERE id = $1 RETURNING id, created_at, updated_at, username, body, post_id, user_id
`

func (q *Queries) DeleteCommentById(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Body,
		&i.PostID,
		&i.UserID,
	)
	return i, err
}

const editComment = `-- name: EditComment :one
UPDATE comments SET body = $1 WHERE id = $2 RETURNING id, created_at, updated_at, username, body, post_id, user_id
`

type EditCommentParams struct {
	Body string
	ID   string
}

func (q *Queries) EditComment(ctx context.Context, arg EditCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, editComment, arg.Body, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Body,
		&i.PostID,
		&i.UserID,
	)
	return i, err
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, created_at, updated_at, username, body, post_id, user_id FROM comments WHERE id = $1
`

func (q *Queries) GetCommentByID(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Body,
		&i.PostID,
		&i.UserID,
	)
	return i, err
}

const getCommentCount = `-- name: GetCommentCount :one
SELECT COUNT(*) FROM comments WHERE post_id = $1
`

func (q *Queries) GetCommentCount(ctx context.Context, postID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCommentCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCommentsByPost_Id = `-- name: GetCommentsByPost_Id :many
SELECT id, created_at, updated_at, username, body, post_id, user_id FROM comments WHERE post_id = $1
`

func (q *Queries) GetCommentsByPost_Id(ctx context.Context, postID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPost_Id, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Body,
			&i.PostID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
